import 'dart:developer';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:order/config/common.dart';
import 'package:order/controller/sizebase_controller.dart';
import 'package:order/utils/common_method.dart';
import 'package:order/utils/repository/network_repository.dart';

class SizeBaseScreen extends StatefulWidget {
  const SizeBaseScreen({super.key});

  @override
  State<SizeBaseScreen> createState() => _SizeBaseScreenState();
}

class _SizeBaseScreenState extends State<SizeBaseScreen> {
  final String? token = box!.get('token');
  List sizeList = [];
  // List<Map> dataMap = [];

  List one = [];
  List two = [];
  List three = [];
  sizesGet(BuildContext context) async {
    var res = await networkRepository.sizeApi(context);
    if (res["status"] == "failure") {
      CommonMethod().getXSnackBar('Error', res["status"], Colors.red);
    }
    if (res["sizes"] != null) {
      sizeList = res["sizes"];
      List bidadd = [];
      one = [];
      two = [];
      three = [];
      for (var index = 0; index < sizeList.length; index++) {
        for (var i = 0; i < sizeList[index]["bases"].length; i++) {
          if (sizeList[index]["bases"][i]["is_active"] == "1") {
            // dataMap.add({
            //   "szid": sizeList[index]["szid"],
            //   "bid": sizeList[index]["bases"][i]["bid"],
            // });
            if (sizeList[index]["szid"] == "1") {
              one.add((sizeList[index]["bases"][i]["bid"].toString()));
            } else if (sizeList[index]["szid"] == "2") {
              two.add((sizeList[index]["bases"][i]["bid"].toString()));
            } else if (sizeList[index]["szid"] == "3") {
              three.add((sizeList[index]["bases"][i]["bid"].toString()));
            }
          }
        }
      }
      setState(() {});
    }
  }

  sizeUpdate(BuildContext context, data) async {
    final String? token = box!.get('token');

    log("Api Send Data --- $data");
    var res = await networkRepository.sizeUpdateApi(context, data: data);
    if (res["status"] == "failure") {
      CommonMethod().getXSnackBar('Error', res["status"], Colors.red);
    }
    if (res["status"] == "success") {
      sizesGet(context);
    }
  }

  @override
  void initState() {
    Future.delayed(Duration.zero, () => sizesGet(context));
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Size Base"), centerTitle: true),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Expanded(
            child: GetBuilder<SizeBaseController>(
                init: SizeBaseController(),
                builder: (controller) {
                  List bidadd = [];
                  return Padding(
                    padding: const EdgeInsets.all(20),
                    child: Center(
                      child: ListView.builder(
                          itemCount: sizeList.length,
                          itemBuilder: (context, index) {
                            return Card(
                              child: DataTable(
                                columns: [
                                  DataColumn(
                                      label: Text(sizeList[index]["szname"])),
                                  const DataColumn(label: Text("")),
                                  const DataColumn(label: Text("")),
                                ],
                                rows: List<DataRow>.generate(
                                    sizeList[index]["bases"].length, (ind) {
                                  return DataRow(cells: [
                                    DataCell(Text(
                                        sizeList[index]["bases"][ind]["bid"])),
                                    DataCell(Text(sizeList[index]["bases"][ind]
                                        ["bname"])),
                                    DataCell(Row(
                                      children: [
                                        Text(sizeList[index]["bases"][ind]
                                                    ["is_active"] ==
                                                "1"
                                            ? "ON "
                                            : "OFF "),
                                        sizeSwitch(index, ind, context),
                                      ],
                                    )),
                                  ]);
                                }),
                              ),
                            );
                          }),
                    ),
                  );
                }),
          ),
          ElevatedButton(
              onPressed: () {
                // log(dataMap.toString());
              },
              child: const Text("data"))
        ],
      ),
    );
  }

  CupertinoSwitch sizeSwitch(int index, int ind, BuildContext context) {
    return CupertinoSwitch(
        value: sizeList[index]["bases"][ind]["is_active"] == "1",
        onChanged: (value) {
          log(index.toString());
          if (!value) {
            index == 0
                ? one.remove(sizeList[index]["bases"][ind]["bid"].toString())
                : index == 1
                    ? two
                        .remove(sizeList[index]["bases"][ind]["bid"].toString())
                    : index == 2
                        ? three.remove(
                            sizeList[index]["bases"][ind]["bid"].toString())
                        : null;
            // dataMap.removeWhere((element) {
            //     return element.toString() ==
            //         {
            //           "szid": sizeList[index]["szid"],
            //           "bid": sizeList[index]["bases"][ind]["bid"],
            //         }.toString();
            //   });
          }

          if (value) {
            index == 0
                ? one.add(sizeList[index]["bases"][ind]["bid"].toString())
                : index == 1
                    ? two.add(sizeList[index]["bases"][ind]["bid"].toString())
                    : index == 2
                        ? three.add(
                            sizeList[index]["bases"][ind]["bid"].toString())
                        : null;

            // dataMap.add({
            //   "szid": sizeList[index]["szid"],
            //   "bid": sizeList[index]["bases"][ind]["bid"],
            // });
          }

          setState(() {});
          sizeUpdate(context, {
            "tkn": token.toString(),
            "sbarr": [
              {
                "szid": (index + 1).toString(),
                "bid": index == 0
                    ? one.toString().replaceAll("[", "").replaceAll("]", "")
                    : index == 1
                        ? two.toString().replaceAll("[", "").replaceAll("]", "")
                        : index == 2
                            ? three
                                .toString()
                                .replaceAll("[", "")
                                .replaceAll("]", "")
                            : 3
              }
            ]
          });
        });
  }
}
